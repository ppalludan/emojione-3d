// Generated by CoffeeScript 1.12.3
(function() {
  var Canvas, Stenographer, randomId;

  Canvas = require("canvas");

  randomId = require('./randomId');

  Stenographer = (function() {
    function Stenographer(callsPerFunc) {
      this.callsPerFunc = callsPerFunc != null ? callsPerFunc : null;
      this.output = '';
      this.images = {};
      this.contextName = '$';
      this.propertiesName = 'p';
      this.calls = 0;
      this.startFunc = "function(" + this.contextName + "," + this.propertiesName + "){\n";
      this.endFunc = "}";
      this.splitFunc = this.endFunc + "," + this.startFunc;
    }

    Stenographer.prototype.toJS = function(width, height) {
      return "{\"w\":" + (JSON.stringify(width)) + ",\"h\":" + (JSON.stringify(height)) + ",\"d\":[" + this.startFunc + this.output + this.endFunc + "],\"i\":" + (JSON.stringify(this.images)) + "}";
    };

    Stenographer.prototype.serialize = function(value, roundNumbers) {
      var imageId, t;
      if (roundNumbers == null) {
        roundNumbers = false;
      }
      t = typeof value;
      if (t === 'number' && roundNumbers) {
        return (+value.toFixed(6)).toString();
      } else if ((t === "boolean" || t === "number" || t === "string") || value === null) {
        return JSON.stringify(value);
      } else if ((value != null ? value.targetId : void 0) != null) {
        return this.propertiesName + "." + value.targetId;
      } else if ((value != null ? value.tagName : void 0) === "IMG" || ((value != null ? value.src : void 0) != null)) {
        imageId = randomId('img');
        this.images[imageId] = this.getBase64Image(value);
        return this.propertiesName + "." + imageId;
      } else if ((value != null ? value.tagName : void 0) === "CANVAS" || value != null && value.toString() === '[object Canvas]') {
        imageId = randomId('img');
        this.images[imageId] = value.toDataURL('image/png');
        return this.propertiesName + "." + imageId;
      } else {
        throw new Error("Could not serialize value: " + (value ? value.toString() : 'null'));
      }
    };

    Stenographer.prototype.getBase64Image = function(img) {
      var canvas, ctx;
      canvas = new Canvas();
      canvas.width = img.width;
      canvas.height = img.height;
      ctx = canvas.getContext("2d");
      ctx.drawImage(img, 0, 0);
      return canvas.toDataURL("image/png");
    };

    Stenographer.prototype.serializeArgs = function(args, roundNumbers) {
      var arg, i, len, out;
      if (roundNumbers == null) {
        roundNumbers = false;
      }
      out = [];
      for (i = 0, len = args.length; i < len; i++) {
        arg = args[i];
        out.push(this.serialize(arg, roundNumbers));
      }
      return out.join(',');
    };

    Stenographer.prototype.setContextProperty = function(propertyName, value) {
      this.output += this.contextName + "." + propertyName + " = " + (this.serialize(value)) + ";\n";
    };

    Stenographer.prototype.invokeChildObject = function(name, fn, args) {
      this.output += this.propertiesName + "." + name + "." + fn + "(" + (this.serializeArgs(args)) + ");\n";
    };

    Stenographer.prototype.shouldRoundNumbers = function(fn) {
      return fn === "moveTo" || fn === "lineTo" || fn === "bezierCurveTo" || fn === "quadraticCurveTo";
    };

    Stenographer.prototype.invokeContext = function(fn, args, assignTarget) {
      if (assignTarget == null) {
        assignTarget = null;
      }
      if (assignTarget != null) {
        this.output += this.propertiesName + "." + assignTarget + " = ";
      }

      this.output += this.contextName + "." + fn + "(" + (this.serializeArgs(args, this.shouldRoundNumbers(fn))) + ");\n";
      if (fn === "save") {
        this.output += this.propertiesName + ".stack++;\n";
      }
      if (fn === "restore") {
        this.output += this.propertiesName + ".stack--;\n";
      }
      this.calls += 1;
      if ((this.callsPerFunc != null) && this.calls % this.callsPerFunc === 0) {
        this.output += this.splitFunc;
      }
    };

    return Stenographer;

  })();

  module.exports = Stenographer;

}).call(this);

// Generated by CoffeeScript 1.12.3
(function () {
    var FS, PKG, canvgc;

    PKG = require('../../package.json');

    FS = require('fs');

    canvgc = require('./canvgc');

    module.exports = require('coa').Cmd().helpful().name(PKG.name).title(PKG.description).opt().name("input").title("Input file").short("i").long("input").val(function (val) {
        return val || this.reject("Option --input must have a value.");
    }).end().opt().name("output").title("Output file").short("o").long("output").val(function (val) {
        return val || this.reject("Option --output must have a value.");
    }).end().opt().name("chunk").title("The number of CanvasRenderingContext2D commands to call per function").long("chunk").val(function (val) {
        var n;
        n = parseInt(val);
        if (isNaN(n)) {
            return null;
        } else {
            return n;
        }
    }).end().opt().name("prepend").title("Javascript to prepend to the output file").long("prepend").end().opt().name("append").title("Javascript to append to the output file").long("append").end().arg().name('input').title('Alias to --input').end().arg().name('output').title('Alias to --output').end().act(function (opts, args) {
        var input, output, ref, ref1;
        input = (ref = args != null ? args.input : void 0) != null ? ref : opts.input;
        output = (ref1 = args != null ? args.output : void 0) != null ? ref1 : opts.output;
        if (!((input != null) && (output != null))) {
            return this.usage();
        }
        FS.readFile(input, 'utf8', function (err, data) {
            console.log(err);
            if (err) {
                throw err;
            }
            return canvgc(data, opts.chunk, function (err, jsData) {
                if (err) {
                    throw err;
                }
                if (opts.prepend != null) {
                    jsData = "" + opts.prepend + jsData;
                }
                if (opts.append != null) {
                    jsData += opts.append;
                }
                return FS.writeFile(output, jsData, 'utf8', function (err) { });
            });
        });
    });

}).call(this);
